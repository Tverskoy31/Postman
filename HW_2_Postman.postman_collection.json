{
	"info": {
		"_postman_id": "69a705e8-563f-4f5d-b7a9-234d0143115c",
		"name": "HW_2_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "http://162.55.220.72:5005/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Проверка статус кода 200\r",
							"pm.test(\"response is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Проверка, что в body приходит правильный string\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.eql (\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://162.55.220.72:5005/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Проверка статус кода 200\r",
							"pm.test(\"response is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json\r",
							"let responseJson = pm.response.json();\r",
							"\r",
							"//4. Проверить, что name в ответе равно name в request (name вбить руками.)\r",
							"pm.test(\"name_response = name_request\" , function () {\r",
							"pm.expect(responseJson.name).to.eql(\"evgen\");\r",
							"});\r",
							"\r",
							"//5. Проверить, что age в ответе равно age в request (age вбить руками.)\r",
							"pm.test(\"age_response = age_request\" , function () {\r",
							"pm.expect(responseJson.age).to.eql(\"34\");\r",
							"});\r",
							"\r",
							"//6. Проверить, что salary в ответе равно salary в request (salary вбить руками.)\r",
							"pm.test(\"salary_response = salary_request\" , function () {\r",
							"pm.expect(responseJson.salary).to.eql(2000);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request\r",
							"let req = request.data\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name в request (name забрать из request.)\r",
							"pm.test(\"name_response = name_request-2\" , function () {\r",
							"   pm.expect(responseJson.name).to.eql (req.name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age в request (age забрать из request.)\r",
							"pm.test(\"age_response = age_request-2\" , function () {\r",
							"   pm.expect(responseJson.age).to.eql (req.age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary в request (salary забрать из request.)\r",
							"pm.test(\"salary_response = salary_request-2\" , function () {\r",
							"\r",
							"   pm.expect (responseJson.salary).to.eql (Number(req.salary));\r",
							"})\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(responseJson.family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let req_salary_1_5 = req.salary * 4\r",
							"let resp_salary_1_5 = (responseJson.family.u_salary_1_5_year)\r",
							"\r",
							"pm.test(\"salary*4 = u_salary_1_5_year\" , function () {\r",
							"   pm.expect(req_salary_1_5).to.eql (resp_salary_1_5);\r",
							"   })"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "34",
							"type": "default"
						},
						{
							"key": "name",
							"value": "evgen",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "default"
						},
						{
							"key": "",
							"value": "",
							"type": "default",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://162.55.220.72:5005/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"status_code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let responseJson = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"//let req = pm.request.json();\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name в request (name забрать из request.)\r",
							"pm.test(\"name_response = name_request\" , function () {\r",
							"      pm.expect(responseJson.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							" // 6. Проверить, что age в ответе равно age в request (age забрать из request.)\r",
							"pm.test(\"age_response = age_request\" , function () {\r",
							"   pm.expect(req.age).to.eql (responseJson.age);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary в request (salary забрать из request.)\r",
							"pm.test(\"salary_response = salary_request\" , function () {\r",
							"\r",
							"   pm.expect (Number(req.salary)).to.eql (responseJson.salary);\r",
							"})\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(responseJson.family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"param_dog have param_name\", function () {\r",
							"    pm.expect (responseJson.family.pets.dog) .to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"param_dog have param_age\", function () {\r",
							"    pm.expect (responseJson.family.pets.dog) .to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"param_name have value_Luky\", function () {\r",
							"   pm.expect(responseJson.family.pets.dog.name).to.be.oneOf([\"Luky\"])\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"param_age = 4\", function () {\r",
							"   pm.expect(responseJson.family.pets.dog.age).to.be.oneOf([4])\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=evgen&age=34&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "evgen"
						},
						{
							"key": "age",
							"value": "34"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://162.55.220.72:5005/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"status_code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let responseJson = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name в request (name забрать из request.)\r",
							"pm.test(\"name_response = name_request\" , function () {\r",
							"      pm.expect(responseJson.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							" // 6. Проверить, что age в ответе равно age в request (age забрать из request.)\r",
							"pm.test(\"age_response = age_request\" , function () {\r",
							"   pm.expect (Number(req.age)).to.eql (responseJson.age);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log (\"salary из request === \" + req.salary)\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"salary из response === \" + responseJson.salary)\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"0 element salary из response === \" + responseJson.salary[0])\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"1-st element from salary из response === \" + responseJson.salary[1])\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"2-nd element from salary из response === \" + responseJson.salary[2])\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"0 element salary = salary from response\", function () {\r",
							"    pm.expect(responseJson.salary[0]).to.eql (Number(req.salary));\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"1 element salary = salary *2 from response\", function () {\r",
							"    pm.expect(responseJson.salary[1]).to.eql (String(req.salary *2));\r",
							"});\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"2 element salary = salary *3 from response\", function () {\r",
							"    pm.expect(responseJson.salary[2]).to.eql (String(req.salary *3));\r",
							"});\r",
							"\r",
							"// 15 и 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", \"evgen\");\r",
							"\r",
							"// 16 и 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", \"34\");\r",
							"\r",
							"// 17 и 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", \"2000\");\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (i =0; i< responseJson.salary.length; i++) {\r",
							"    console.log (\"element from salary\", responseJson.salary[i]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=evgen&age=34&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "evgen"
						},
						{
							"key": "age",
							"value": "34"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://162.55.220.72:5005/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"let salary = pm.environment.get('salary')\r",
							"\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"let age = pm.environment.get('age')\r",
							"\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"let aname = pm.environment.get('name')\r",
							"\r",
							"// 4. Отправить запрос.\r",
							"  // Нажали кнопку \"Send\", всё работает)\r",
							"// 5. Статус код 200\r",
							"pm.test(\"status_code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"let responseJson = pm.response.json();\r",
							"// 7. Спарсить request.\r",
							"let req = request.data\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"json response have param_start_qa_salary\", function () {\r",
							"    pm.expect (responseJson) .to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"json response have param_start_qa_salary_after_6_months\", function () {\r",
							"    pm.expect (responseJson) .to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"json response have param_start_qa_salary_after_12_months\", function () {\r",
							"    pm.expect (responseJson) .to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"json response have param_start_qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect (responseJson) .to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"json response have param_start_qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect (responseJson) .to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"json response have param_person\", function () {\r",
							"    pm.expect (responseJson) .to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"let req_salary_number = Number(req.salary)\r",
							"pm.test(\"start_qa_salary = salary из request\" , function () {\r",
							"      pm.expect(responseJson.start_qa_salary).to.eql (req_salary_number);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months = salary * 2 из request\" , function () {\r",
							"      pm.expect(responseJson.qa_salary_after_6_months).to.eql (req_salary_number * 2);\r",
							"});\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months = salary * 2.7 из request\" , function () {\r",
							"      pm.expect(responseJson.qa_salary_after_12_months).to.eql (req_salary_number * 2.7);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year = salary * 3 из request\" , function () {\r",
							"      pm.expect (responseJson ['qa_salary_after_1.5_year']) .to.eql(req_salary_number * 3.3);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years = salary * 3.8 из request\" , function () {\r",
							"      pm.expect (responseJson ['qa_salary_after_3.5_years']) .to.eql(req_salary_number * 3.8);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"1-й элемент из u_name from person = salary from request\", function () {\r",
							"    pm.expect (responseJson.person[1]).to.eql (req.req_salary_number);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"параметр u_age = age from request\", function () {\r",
							"    pm.expect (responseJson.person.u_age) .to.eql (Number(req.age));\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"параметр u_salary_5_years = salary*4.2 from request\", function () {\r",
							"    pm.expect (responseJson.person.u_salary_5_years) .to.eql (req_salary_number * 4.2 );\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"//for (i=0; i < responseJson.person.length; i++) {\r",
							"  //console.log (\"element from salary\", responseJson.person[i]);\r",
							"//}\r",
							"for (let i in responseJson.person) {\r",
							" console.log(\"Property:\", i, \"property value:\", responseJson.person[i]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}